{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Todo/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","todo","onChange","index","removeTodo","useContext","classes","console","log","completed","push","style","className","join","type","checked","id","title","onClick","bind","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","form","AddTodo","onCreate","Date","now","useState","value","setValue","onSubmit","event","preventDefault","trim","target","App","setTodos","Provider","filter","concat","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAIeA,EAFCC,IAAMC,gBCEhBC,EAAS,CACbC,GAAI,CACFC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,QAAS,aACTC,OAAQ,iBACRC,aAAc,MACdC,aAAc,SAEhBC,MAAO,CACLC,YAAa,SAqCFC,MAjCf,YAA8C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC1BC,EAAeC,qBAAWnB,GAA1BkB,WACFE,EAAU,GAKhB,OAJAC,QAAQC,IAAI,CAAEP,OAAMC,WAAUC,UAC1BF,EAAKQ,WACPH,EAAQI,KAAK,QAGb,wBAAIC,MAAOtB,EAAOC,IAChB,0BAAMsB,UAAWN,EAAQO,KAAK,MAC5B,2BACEC,KAAK,WACLC,QAASd,EAAKQ,UACdE,MAAOtB,EAAOS,MACdI,SAAU,kBAAMA,EAASD,EAAKe,GAAIf,EAAKgB,UAEzC,gCAASd,GAPX,OASGF,EAAKgB,OAER,4BAAQL,UAAU,KAAKM,QAASd,EAAWe,KAAK,KAAMlB,EAAKe,KAA3D,UCnCA3B,EAAS,CACb+B,GAAI,CACFC,UAAW,OACXC,OAAQ,EACR5B,QAAS,IA2BE6B,MAvBf,SAAkBC,GAChB,OACE,wBAAIb,MAAOtB,EAAO+B,IACfI,EAAMC,MAAMC,KAAI,SAACzB,EAAME,GACtB,OACE,kBAAC,EAAD,CACEF,KAAMA,EACN0B,IAAK1B,EAAKe,GACVb,MAAOA,EAAQ,EACfD,SAAUsB,EAAMI,gBClBtBvC,EAAS,CACbwC,KAAM,CACJhC,aAAc,SA6BHiC,MAzBf,YAAgC,IAAbC,EAAY,EAAZA,SACjBxB,QAAQC,IAAIwB,KAAKC,OADY,MAEHC,mBAAS,IAFN,mBAEtBC,EAFsB,KAEfC,EAFe,KAa7B,OACE,0BAAMzB,MAAOtB,EAAOwC,KAAMQ,SAV5B,SAAuBC,GACrBA,EAAMC,iBAEFJ,EAAMK,SACRT,EAASI,GACTC,EAAS,OAMT,2BAAOD,MAAOA,EAAOjC,SAAU,SAAAoC,GAAK,OAAIF,EAASE,EAAMG,OAAON,UAC9D,4BAAQrB,KAAK,UAAb,cCuBS4B,MA3Cf,WAAgB,IAAD,EACavD,IAAM+C,SAAS,CACvC,CAAElB,GAAI,EAAGP,WAAW,EAAOQ,MAAO,iEAClC,CAAED,GAAI,EAAGP,WAAW,EAAMQ,MAAO,uEACjC,CAAED,GAAI,EAAGP,WAAW,EAAOQ,MAAO,+EAJvB,mBACNQ,EADM,KACCkB,EADD,KA4Bb,OADApC,QAAQC,IAAIwB,KAAKC,OAEf,kBAAC,EAAQW,SAAT,CAAkBT,MAAO,CAAE/B,WAX7B,SAAoBY,GAClB2B,EAASlB,EAAMoB,QAAO,SAAA5C,GAAI,OAAIA,EAAKe,KAAOA,SAWxC,yBAAKJ,UAAU,WACb,0CACA,kBAAC,EAAD,CAASmB,SAVf,SAAiBd,GACf0B,EACElB,EAAMqB,OAAO,CAAC,CAAE7B,MAAOA,EAAOD,GAAIgB,KAAKC,MAAOxB,WAAW,SAStDgB,EAAMsB,OACL,kBAAC,EAAD,CAAUtB,MAAOA,EAAOG,SA3BhC,SAAoBZ,EAAIC,GACtB0B,EACElB,EAAMC,KAAI,SAAAzB,GAIR,OAHIA,EAAKe,KAAOA,IACdf,EAAKQ,WAAaR,EAAKQ,WAElBR,SAuBL,2CC7BU+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e4907158.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;\r\n","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Context from '../context';\r\n\r\nconst styles = {\r\n  li: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    padding: '.5rem 1rem',\r\n    border: '1px solid #ccc',\r\n    borderRadius: '4px',\r\n    marginBottom: '.5rem'\r\n  },\r\n  input: {\r\n    marginRight: '1rem'\r\n  }\r\n};\r\n\r\nfunction TodoItem({ todo, onChange, index }) {\r\n  const { removeTodo } = useContext(Context);\r\n  const classes = [];\r\n  console.log({ todo, onChange, index });\r\n  if (todo.completed) {\r\n    classes.push('done');\r\n  }\r\n  return (\r\n    <li style={styles.li}>\r\n      <span className={classes.join(' ')}>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={todo.completed}\r\n          style={styles.input}\r\n          onChange={() => onChange(todo.id, todo.title)}\r\n        />\r\n        <strong>{index}</strong>\r\n        &nbsp;\r\n        {todo.title}\r\n      </span>\r\n      <button className=\"rm\" onClick={removeTodo.bind(null, todo.id)}>\r\n        &times;\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  index: PropTypes.number,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst styles = {\r\n  ul: {\r\n    listStyle: 'none',\r\n    margin: 0,\r\n    padding: 0\r\n  }\r\n};\r\n\r\nfunction TodoList(props) {\r\n  return (\r\n    <ul style={styles.ul}>\r\n      {props.todos.map((todo, index) => {\r\n        return (\r\n          <TodoItem\r\n            todo={todo}\r\n            key={todo.id}\r\n            index={index + 1}\r\n            onChange={props.onToggle}\r\n          />\r\n        );\r\n        debugger;\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst styles = {\r\n  form: {\r\n    marginBottom: '1rem'\r\n  }\r\n};\r\n\r\nfunction AddTodo({ onCreate }) {\r\n  console.log(Date.now());\r\n  const [value, setValue] = useState('');\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault();\r\n\r\n    if (value.trim()) {\r\n      onCreate(value);\r\n      setValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form style={styles.form} onSubmit={submitHandler}>\r\n      <input value={value} onChange={event => setValue(event.target.value)} />\r\n      <button type=\"submit\">Add todo</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  onCreate: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\nimport TodoList from './Todo/TodoList';\nimport Context from './context';\nimport AddTodo from './Todo/AddTodo';\n\nfunction App() {\n  const [todos, setTodos] = React.useState([\n    { id: 1, completed: false, title: 'Купить хлеб' },\n    { id: 2, completed: true, title: 'Купить масло' },\n    { id: 3, completed: false, title: 'Купить молоко' }\n  ]);\n\n  function toggleTodo(id, title) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n\n  function addTodo(title) {\n    setTodos(\n      todos.concat([{ title: title, id: Date.now(), completed: false }])\n    );\n  }\n  console.log(Date.now());\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className=\"wrapper\">\n        <h1>React TODO</h1>\n        <AddTodo onCreate={addTodo} />\n        {todos.length ? (\n          <TodoList todos={todos} onToggle={toggleTodo} />\n        ) : (\n          <p>No TODOS!</p>\n        )}\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}